from _typeshed import Incomplete
from rds.core.cache.base import BaseCache as BaseCache
from typing import Any, Dict, List, Union

class SearchEngineCache(BaseCache):
    search_engine_alias: Incomplete
    index_name: Incomplete
    refresh: Incomplete
    def __init__(self, **params: Dict[str, Any]) -> None: ...
    @property
    def search_engine(self) -> Any: ...
    def key_exists(self, key: str) -> bool: ...
    def add(self, key: str, value: Any, ttl: Union[int, None] = ...) -> bool: ...
    def get(self, key: str, default: Any = ...) -> Any: ...
    def set(self, key: str, value: Any, ttl: Union[int, None] = ...) -> None: ...
    def touch(self, key: str, ttl: Union[int, None] = ...) -> bool: ...
    def delete(self, key: str) -> None: ...
    def clear(self) -> None: ...
    def get_many(self, keys: List[str]) -> Dict[str, Any]: ...
