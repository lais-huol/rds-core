from _typeshed import Incomplete
from typing import Any, Dict, List, Union

DEFAULT_TTL: int
MISSING_KEY: Incomplete

class BaseCache:
    default_ttl: Incomplete
    def __init__(self, **params: Dict[str, Any]) -> None: ...
    def get_ttl(self, ttl: Union[int, None] = ...) -> int: ...
    def key_exists(self, key: str) -> bool: ...
    def add(self, key: str, value: Any, ttl: Union[int, None] = ...) -> bool: ...
    def get(self, key: str, default: Any = ...) -> Any: ...
    def set(self, key: str, value: Any, ttl: Union[int, None] = ...) -> None: ...
    def get_or_set(self, key: str, default: Any, ttl: Union[int, None] = ...) -> Any: ...
    def delete(self, key: str) -> None: ...
    def touch(self, key: str, ttl: Union[int, None] = ...) -> bool: ...
    def get_many(self, keys: List[str]) -> Dict[str, Any]: ...
    def set_many(self, data: Any, ttl: Union[int, None] = ...) -> None: ...
    def delete_many(self, keys: List[str]) -> None: ...
    def incr(self, key: str, delta: Union[int, float] = ...) -> Union[int, float]: ...
    def decr(self, key: str, delta: Union[int, float] = ...) -> Union[int, float]: ...
    def clear(self) -> None: ...
    def close(self, **kwargs: Dict[str, Any]) -> None: ...
